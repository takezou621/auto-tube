name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, claude/**]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          black src/ --check
          isort src/ --check-only

      - name: Run tests
        run: |
          pip install pytest pytest-asyncio pytest-cov
          pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t auto-tube:latest .

      - name: Test Docker image
        run: |
          docker run --rm auto-tube:latest python -c "import src; print('Import successful')"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy notification
        run: |
          echo "Deployment would happen here"
          echo "Configure your deployment strategy (AWS, GCP, etc.)"
